module Spread = {
  [@react.component]
  let make = (~props, ~children) => React.cloneElement(children, props);
};
module Page = {
  [@react.component]
  let make =
      (
        ~tailwindStylesPath,
        ~tailwindStyles,
        ~children,
        ~scripts=[],
        ~styles=[],
      ) => {
    <html lang="en" className="flex flex-col h-screen ">
      <head>
        <title> {"server-reason-react-test" |> React.string} </title>
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <meta charSet="UTF-8" />
        <meta
          name="viewport"
          content="width=device-width, initial-scale=1.0"
        />
      </head>
      // This matches the css element normally provided by the vite dev server,
      // to avoid a flash of unstyled content on initial loads
      // TODO: parse vite manifest file generated by `vite build` and replace
      // this when building for prod
      <Spread props=[|String(("data-vite-dev-id", tailwindStylesPath))|]>
        <style
          type_="text/css"
          dangerouslySetInnerHTML={"__html": tailwindStyles}
        />
      </Spread>
      {styles
       |> List.map(content =>
            <style
              type_="text/css"
              dangerouslySetInnerHTML={"__html": content}
            />
          )
       |> React.list}
      <body
        className="bg-zinc-950 flex flex-1 flex-col h-screen overflow-hidden">
        <div id="root"> children </div>
        {scripts
         |> List.map(src => <script type_="module" src />)
         |> React.list}
      </body>
    </html>;
  };
};

let parseUrl = url => {
  let url = Uri.of_string(url) |> Uri.path_and_query;
  let (path, search) =
    switch (url |> String.split_on_char('?')) {
    | [path, query] => (path, query)
    | [path] => (path, "")
    | _ => raise(Failure("Invalid url" ++ url))
    };
  let path =
    switch (path |> String.split_on_char('/')) {
    | ["", ""]
    | [""] => []
    | ["", ...rest] => rest
    | _ => raise(Failure("Invalid url path: " ++ url))
    };
  {ReasonReactRouter.path, hash: "", search};
};

let render = (env, ~url) => {
  let serverUrl = parseUrl(url) |> Option.some;
  let app = React_plugin.render(serverUrl);
  let tailwindStyles =
    switch (
      Eio.Switch.run(sw =>
        Http.get(
          env,
          ~headers=[],
          ~sw,
          // the ?direct parameter renders the post-processed css, without the Vite HMR wrapper
          "http://localhost:5173/ui/input.css?direct",
        )
      )
    ) {
    | Error(error) => raise(Failure(error))
    | Ok(result) => result
    };
  ReactDOM.renderToString(
    //TODO: replace getcwd with a non-blocking EIO call once absolute paths are supported
    <Page
      tailwindStyles
      tailwindStylesPath={Sys.getcwd() ++ "/ui/input.css"}
      //TODO: these should be replaced by vite manifest entries in prod
      scripts=[
        "http://localhost:5173/ui/react-refresh.js",
        "http://localhost:5173/@vite/client",
        "http://localhost:5173/_build/default/ui/js/main/ui/js/main.js",
      ]>
      app
    </Page>,
  );
};
